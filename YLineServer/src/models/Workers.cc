/**
 *
 *  Workers.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Workers.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::yline;

const std::string Workers::Cols::_id = "id";
const std::string Workers::Cols::_worker_uuid = "worker_uuid";
const std::string Workers::Cols::_server_instance_uuid = "server_instance_uuid";
const std::string Workers::Cols::_worker_entt_id = "worker_entt_id";
const std::string Workers::Cols::_worker_info = "worker_info";
const std::string Workers::primaryKeyName = "id";
const bool Workers::hasPrimaryKey = true;
const std::string Workers::tableName = "workers";

const std::vector<typename Workers::MetaData> Workers::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"worker_uuid","std::string","uuid",0,0,0,1},
{"server_instance_uuid","std::string","uuid",0,0,0,1},
{"worker_entt_id","int32_t","integer",4,0,0,1},
{"worker_info","std::string","jsonb",0,0,0,1}
};
const std::string &Workers::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Workers::Workers(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["worker_uuid"].isNull())
        {
            workerUuid_=std::make_shared<std::string>(r["worker_uuid"].as<std::string>());
        }
        if(!r["server_instance_uuid"].isNull())
        {
            serverInstanceUuid_=std::make_shared<std::string>(r["server_instance_uuid"].as<std::string>());
        }
        if(!r["worker_entt_id"].isNull())
        {
            workerEnttId_=std::make_shared<int32_t>(r["worker_entt_id"].as<int32_t>());
        }
        if(!r["worker_info"].isNull())
        {
            workerInfo_=std::make_shared<std::string>(r["worker_info"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            workerUuid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            serverInstanceUuid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            workerEnttId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            workerInfo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Workers::Workers(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            workerUuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            serverInstanceUuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            workerEnttId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            workerInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

Workers::Workers(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("worker_uuid"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["worker_uuid"].isNull())
        {
            workerUuid_=std::make_shared<std::string>(pJson["worker_uuid"].asString());
        }
    }
    if(pJson.isMember("server_instance_uuid"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["server_instance_uuid"].isNull())
        {
            serverInstanceUuid_=std::make_shared<std::string>(pJson["server_instance_uuid"].asString());
        }
    }
    if(pJson.isMember("worker_entt_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["worker_entt_id"].isNull())
        {
            workerEnttId_=std::make_shared<int32_t>((int32_t)pJson["worker_entt_id"].asInt64());
        }
    }
    if(pJson.isMember("worker_info"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["worker_info"].isNull())
        {
            workerInfo_=std::make_shared<std::string>(pJson["worker_info"].asString());
        }
    }
}

void Workers::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            workerUuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            serverInstanceUuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            workerEnttId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            workerInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

void Workers::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("worker_uuid"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["worker_uuid"].isNull())
        {
            workerUuid_=std::make_shared<std::string>(pJson["worker_uuid"].asString());
        }
    }
    if(pJson.isMember("server_instance_uuid"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["server_instance_uuid"].isNull())
        {
            serverInstanceUuid_=std::make_shared<std::string>(pJson["server_instance_uuid"].asString());
        }
    }
    if(pJson.isMember("worker_entt_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["worker_entt_id"].isNull())
        {
            workerEnttId_=std::make_shared<int32_t>((int32_t)pJson["worker_entt_id"].asInt64());
        }
    }
    if(pJson.isMember("worker_info"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["worker_info"].isNull())
        {
            workerInfo_=std::make_shared<std::string>(pJson["worker_info"].asString());
        }
    }
}

const int32_t &Workers::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Workers::getId() const noexcept
{
    return id_;
}
void Workers::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Workers::PrimaryKeyType & Workers::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Workers::getValueOfWorkerUuid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(workerUuid_)
        return *workerUuid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Workers::getWorkerUuid() const noexcept
{
    return workerUuid_;
}
void Workers::setWorkerUuid(const std::string &pWorkerUuid) noexcept
{
    workerUuid_ = std::make_shared<std::string>(pWorkerUuid);
    dirtyFlag_[1] = true;
}
void Workers::setWorkerUuid(std::string &&pWorkerUuid) noexcept
{
    workerUuid_ = std::make_shared<std::string>(std::move(pWorkerUuid));
    dirtyFlag_[1] = true;
}

const std::string &Workers::getValueOfServerInstanceUuid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(serverInstanceUuid_)
        return *serverInstanceUuid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Workers::getServerInstanceUuid() const noexcept
{
    return serverInstanceUuid_;
}
void Workers::setServerInstanceUuid(const std::string &pServerInstanceUuid) noexcept
{
    serverInstanceUuid_ = std::make_shared<std::string>(pServerInstanceUuid);
    dirtyFlag_[2] = true;
}
void Workers::setServerInstanceUuid(std::string &&pServerInstanceUuid) noexcept
{
    serverInstanceUuid_ = std::make_shared<std::string>(std::move(pServerInstanceUuid));
    dirtyFlag_[2] = true;
}

const int32_t &Workers::getValueOfWorkerEnttId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(workerEnttId_)
        return *workerEnttId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Workers::getWorkerEnttId() const noexcept
{
    return workerEnttId_;
}
void Workers::setWorkerEnttId(const int32_t &pWorkerEnttId) noexcept
{
    workerEnttId_ = std::make_shared<int32_t>(pWorkerEnttId);
    dirtyFlag_[3] = true;
}

const std::string &Workers::getValueOfWorkerInfo() const noexcept
{
    static const std::string defaultValue = std::string();
    if(workerInfo_)
        return *workerInfo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Workers::getWorkerInfo() const noexcept
{
    return workerInfo_;
}
void Workers::setWorkerInfo(const std::string &pWorkerInfo) noexcept
{
    workerInfo_ = std::make_shared<std::string>(pWorkerInfo);
    dirtyFlag_[4] = true;
}
void Workers::setWorkerInfo(std::string &&pWorkerInfo) noexcept
{
    workerInfo_ = std::make_shared<std::string>(std::move(pWorkerInfo));
    dirtyFlag_[4] = true;
}

void Workers::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Workers::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "worker_uuid",
        "server_instance_uuid",
        "worker_entt_id",
        "worker_info"
    };
    return inCols;
}

void Workers::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getWorkerUuid())
        {
            binder << getValueOfWorkerUuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getServerInstanceUuid())
        {
            binder << getValueOfServerInstanceUuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getWorkerEnttId())
        {
            binder << getValueOfWorkerEnttId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getWorkerInfo())
        {
            binder << getValueOfWorkerInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Workers::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Workers::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getWorkerUuid())
        {
            binder << getValueOfWorkerUuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getServerInstanceUuid())
        {
            binder << getValueOfServerInstanceUuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getWorkerEnttId())
        {
            binder << getValueOfWorkerEnttId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getWorkerInfo())
        {
            binder << getValueOfWorkerInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Workers::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getWorkerUuid())
    {
        ret["worker_uuid"]=getValueOfWorkerUuid();
    }
    else
    {
        ret["worker_uuid"]=Json::Value();
    }
    if(getServerInstanceUuid())
    {
        ret["server_instance_uuid"]=getValueOfServerInstanceUuid();
    }
    else
    {
        ret["server_instance_uuid"]=Json::Value();
    }
    if(getWorkerEnttId())
    {
        ret["worker_entt_id"]=getValueOfWorkerEnttId();
    }
    else
    {
        ret["worker_entt_id"]=Json::Value();
    }
    if(getWorkerInfo())
    {
        ret["worker_info"]=getValueOfWorkerInfo();
    }
    else
    {
        ret["worker_info"]=Json::Value();
    }
    return ret;
}

Json::Value Workers::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getWorkerUuid())
            {
                ret[pMasqueradingVector[1]]=getValueOfWorkerUuid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getServerInstanceUuid())
            {
                ret[pMasqueradingVector[2]]=getValueOfServerInstanceUuid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getWorkerEnttId())
            {
                ret[pMasqueradingVector[3]]=getValueOfWorkerEnttId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getWorkerInfo())
            {
                ret[pMasqueradingVector[4]]=getValueOfWorkerInfo();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getWorkerUuid())
    {
        ret["worker_uuid"]=getValueOfWorkerUuid();
    }
    else
    {
        ret["worker_uuid"]=Json::Value();
    }
    if(getServerInstanceUuid())
    {
        ret["server_instance_uuid"]=getValueOfServerInstanceUuid();
    }
    else
    {
        ret["server_instance_uuid"]=Json::Value();
    }
    if(getWorkerEnttId())
    {
        ret["worker_entt_id"]=getValueOfWorkerEnttId();
    }
    else
    {
        ret["worker_entt_id"]=Json::Value();
    }
    if(getWorkerInfo())
    {
        ret["worker_info"]=getValueOfWorkerInfo();
    }
    else
    {
        ret["worker_info"]=Json::Value();
    }
    return ret;
}

bool Workers::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("worker_uuid"))
    {
        if(!validJsonOfField(1, "worker_uuid", pJson["worker_uuid"], err, true))
            return false;
    }
    else
    {
        err="The worker_uuid column cannot be null";
        return false;
    }
    if(pJson.isMember("server_instance_uuid"))
    {
        if(!validJsonOfField(2, "server_instance_uuid", pJson["server_instance_uuid"], err, true))
            return false;
    }
    else
    {
        err="The server_instance_uuid column cannot be null";
        return false;
    }
    if(pJson.isMember("worker_entt_id"))
    {
        if(!validJsonOfField(3, "worker_entt_id", pJson["worker_entt_id"], err, true))
            return false;
    }
    else
    {
        err="The worker_entt_id column cannot be null";
        return false;
    }
    if(pJson.isMember("worker_info"))
    {
        if(!validJsonOfField(4, "worker_info", pJson["worker_info"], err, true))
            return false;
    }
    else
    {
        err="The worker_info column cannot be null";
        return false;
    }
    return true;
}
bool Workers::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Workers::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("worker_uuid"))
    {
        if(!validJsonOfField(1, "worker_uuid", pJson["worker_uuid"], err, false))
            return false;
    }
    if(pJson.isMember("server_instance_uuid"))
    {
        if(!validJsonOfField(2, "server_instance_uuid", pJson["server_instance_uuid"], err, false))
            return false;
    }
    if(pJson.isMember("worker_entt_id"))
    {
        if(!validJsonOfField(3, "worker_entt_id", pJson["worker_entt_id"], err, false))
            return false;
    }
    if(pJson.isMember("worker_info"))
    {
        if(!validJsonOfField(4, "worker_info", pJson["worker_info"], err, false))
            return false;
    }
    return true;
}
bool Workers::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Workers::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
