/**
 *
 *  Tasks.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Tasks.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::yline;

const std::string Tasks::Cols::_task_id = "task_id";
const std::string Tasks::Cols::_task_order = "task_order";
const std::string Tasks::Cols::_task_name = "task_name";
const std::string Tasks::Cols::_job_id = "job_id";
const std::string Tasks::Cols::_dependency = "dependency";
const std::string Tasks::Cols::_status = "status";
const std::vector<std::string> Tasks::primaryKeyName = {"task_id","job_id"};
const bool Tasks::hasPrimaryKey = true;
const std::string Tasks::tableName = "tasks";

const std::vector<typename Tasks::MetaData> Tasks::metaData_={
{"task_id","std::string","character varying",255,0,1,1},
{"task_order","int32_t","integer",4,0,0,1},
{"task_name","std::string","character varying",255,0,0,1},
{"job_id","int32_t","integer",4,0,1,1},
{"dependency","bool","boolean",1,0,0,1},
{"status","std::string","USER-DEFINED",0,0,0,1}
};
const std::string &Tasks::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Tasks::Tasks(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["task_id"].isNull())
        {
            taskId_=std::make_shared<std::string>(r["task_id"].as<std::string>());
        }
        if(!r["task_order"].isNull())
        {
            taskOrder_=std::make_shared<int32_t>(r["task_order"].as<int32_t>());
        }
        if(!r["task_name"].isNull())
        {
            taskName_=std::make_shared<std::string>(r["task_name"].as<std::string>());
        }
        if(!r["job_id"].isNull())
        {
            jobId_=std::make_shared<int32_t>(r["job_id"].as<int32_t>());
        }
        if(!r["dependency"].isNull())
        {
            dependency_=std::make_shared<bool>(r["dependency"].as<bool>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<std::string>(r["status"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            taskId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            taskOrder_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            taskName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            jobId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            dependency_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Tasks::Tasks(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            taskId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            taskOrder_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            taskName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            jobId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            dependency_=std::make_shared<bool>(pJson[pMasqueradingVector[4]].asBool());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

Tasks::Tasks(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("task_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["task_id"].isNull())
        {
            taskId_=std::make_shared<std::string>(pJson["task_id"].asString());
        }
    }
    if(pJson.isMember("task_order"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["task_order"].isNull())
        {
            taskOrder_=std::make_shared<int32_t>((int32_t)pJson["task_order"].asInt64());
        }
    }
    if(pJson.isMember("task_name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["task_name"].isNull())
        {
            taskName_=std::make_shared<std::string>(pJson["task_name"].asString());
        }
    }
    if(pJson.isMember("job_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["job_id"].isNull())
        {
            jobId_=std::make_shared<int32_t>((int32_t)pJson["job_id"].asInt64());
        }
    }
    if(pJson.isMember("dependency"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["dependency"].isNull())
        {
            dependency_=std::make_shared<bool>(pJson["dependency"].asBool());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
}

void Tasks::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            taskId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            taskOrder_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            taskName_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            jobId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            dependency_=std::make_shared<bool>(pJson[pMasqueradingVector[4]].asBool());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

void Tasks::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("task_id"))
    {
        if(!pJson["task_id"].isNull())
        {
            taskId_=std::make_shared<std::string>(pJson["task_id"].asString());
        }
    }
    if(pJson.isMember("task_order"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["task_order"].isNull())
        {
            taskOrder_=std::make_shared<int32_t>((int32_t)pJson["task_order"].asInt64());
        }
    }
    if(pJson.isMember("task_name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["task_name"].isNull())
        {
            taskName_=std::make_shared<std::string>(pJson["task_name"].asString());
        }
    }
    if(pJson.isMember("job_id"))
    {
        if(!pJson["job_id"].isNull())
        {
            jobId_=std::make_shared<int32_t>((int32_t)pJson["job_id"].asInt64());
        }
    }
    if(pJson.isMember("dependency"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["dependency"].isNull())
        {
            dependency_=std::make_shared<bool>(pJson["dependency"].asBool());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
}

const std::string &Tasks::getValueOfTaskId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(taskId_)
        return *taskId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tasks::getTaskId() const noexcept
{
    return taskId_;
}
void Tasks::setTaskId(const std::string &pTaskId) noexcept
{
    taskId_ = std::make_shared<std::string>(pTaskId);
    dirtyFlag_[0] = true;
}
void Tasks::setTaskId(std::string &&pTaskId) noexcept
{
    taskId_ = std::make_shared<std::string>(std::move(pTaskId));
    dirtyFlag_[0] = true;
}

const int32_t &Tasks::getValueOfTaskOrder() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(taskOrder_)
        return *taskOrder_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tasks::getTaskOrder() const noexcept
{
    return taskOrder_;
}
void Tasks::setTaskOrder(const int32_t &pTaskOrder) noexcept
{
    taskOrder_ = std::make_shared<int32_t>(pTaskOrder);
    dirtyFlag_[1] = true;
}

const std::string &Tasks::getValueOfTaskName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(taskName_)
        return *taskName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tasks::getTaskName() const noexcept
{
    return taskName_;
}
void Tasks::setTaskName(const std::string &pTaskName) noexcept
{
    taskName_ = std::make_shared<std::string>(pTaskName);
    dirtyFlag_[2] = true;
}
void Tasks::setTaskName(std::string &&pTaskName) noexcept
{
    taskName_ = std::make_shared<std::string>(std::move(pTaskName));
    dirtyFlag_[2] = true;
}

const int32_t &Tasks::getValueOfJobId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(jobId_)
        return *jobId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tasks::getJobId() const noexcept
{
    return jobId_;
}
void Tasks::setJobId(const int32_t &pJobId) noexcept
{
    jobId_ = std::make_shared<int32_t>(pJobId);
    dirtyFlag_[3] = true;
}

const bool &Tasks::getValueOfDependency() const noexcept
{
    static const bool defaultValue = bool();
    if(dependency_)
        return *dependency_;
    return defaultValue;
}
const std::shared_ptr<bool> &Tasks::getDependency() const noexcept
{
    return dependency_;
}
void Tasks::setDependency(const bool &pDependency) noexcept
{
    dependency_ = std::make_shared<bool>(pDependency);
    dirtyFlag_[4] = true;
}

const std::string &Tasks::getValueOfStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tasks::getStatus() const noexcept
{
    return status_;
}
void Tasks::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[5] = true;
}
void Tasks::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[5] = true;
}

void Tasks::updateId(const uint64_t id)
{
}
typename Tasks::PrimaryKeyType Tasks::getPrimaryKey() const
{
    return std::make_tuple(*taskId_,*jobId_);
}

const std::vector<std::string> &Tasks::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "task_id",
        "task_order",
        "task_name",
        "job_id",
        "dependency",
        "status"
    };
    return inCols;
}

void Tasks::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getTaskId())
        {
            binder << getValueOfTaskId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getTaskOrder())
        {
            binder << getValueOfTaskOrder();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTaskName())
        {
            binder << getValueOfTaskName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getJobId())
        {
            binder << getValueOfJobId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDependency())
        {
            binder << getValueOfDependency();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Tasks::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Tasks::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getTaskId())
        {
            binder << getValueOfTaskId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getTaskOrder())
        {
            binder << getValueOfTaskOrder();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTaskName())
        {
            binder << getValueOfTaskName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getJobId())
        {
            binder << getValueOfJobId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDependency())
        {
            binder << getValueOfDependency();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Tasks::toJson() const
{
    Json::Value ret;
    if(getTaskId())
    {
        ret["task_id"]=getValueOfTaskId();
    }
    else
    {
        ret["task_id"]=Json::Value();
    }
    if(getTaskOrder())
    {
        ret["task_order"]=getValueOfTaskOrder();
    }
    else
    {
        ret["task_order"]=Json::Value();
    }
    if(getTaskName())
    {
        ret["task_name"]=getValueOfTaskName();
    }
    else
    {
        ret["task_name"]=Json::Value();
    }
    if(getJobId())
    {
        ret["job_id"]=getValueOfJobId();
    }
    else
    {
        ret["job_id"]=Json::Value();
    }
    if(getDependency())
    {
        ret["dependency"]=getValueOfDependency();
    }
    else
    {
        ret["dependency"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    return ret;
}

Json::Value Tasks::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getTaskId())
            {
                ret[pMasqueradingVector[0]]=getValueOfTaskId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTaskOrder())
            {
                ret[pMasqueradingVector[1]]=getValueOfTaskOrder();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTaskName())
            {
                ret[pMasqueradingVector[2]]=getValueOfTaskName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getJobId())
            {
                ret[pMasqueradingVector[3]]=getValueOfJobId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDependency())
            {
                ret[pMasqueradingVector[4]]=getValueOfDependency();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[5]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getTaskId())
    {
        ret["task_id"]=getValueOfTaskId();
    }
    else
    {
        ret["task_id"]=Json::Value();
    }
    if(getTaskOrder())
    {
        ret["task_order"]=getValueOfTaskOrder();
    }
    else
    {
        ret["task_order"]=Json::Value();
    }
    if(getTaskName())
    {
        ret["task_name"]=getValueOfTaskName();
    }
    else
    {
        ret["task_name"]=Json::Value();
    }
    if(getJobId())
    {
        ret["job_id"]=getValueOfJobId();
    }
    else
    {
        ret["job_id"]=Json::Value();
    }
    if(getDependency())
    {
        ret["dependency"]=getValueOfDependency();
    }
    else
    {
        ret["dependency"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    return ret;
}

bool Tasks::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("task_id"))
    {
        if(!validJsonOfField(0, "task_id", pJson["task_id"], err, true))
            return false;
    }
    else
    {
        err="The task_id column cannot be null";
        return false;
    }
    if(pJson.isMember("task_order"))
    {
        if(!validJsonOfField(1, "task_order", pJson["task_order"], err, true))
            return false;
    }
    else
    {
        err="The task_order column cannot be null";
        return false;
    }
    if(pJson.isMember("task_name"))
    {
        if(!validJsonOfField(2, "task_name", pJson["task_name"], err, true))
            return false;
    }
    else
    {
        err="The task_name column cannot be null";
        return false;
    }
    if(pJson.isMember("job_id"))
    {
        if(!validJsonOfField(3, "job_id", pJson["job_id"], err, true))
            return false;
    }
    else
    {
        err="The job_id column cannot be null";
        return false;
    }
    if(pJson.isMember("dependency"))
    {
        if(!validJsonOfField(4, "dependency", pJson["dependency"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(5, "status", pJson["status"], err, true))
            return false;
    }
    return true;
}
bool Tasks::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Tasks::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("task_id"))
    {
        if(!validJsonOfField(0, "task_id", pJson["task_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("task_order"))
    {
        if(!validJsonOfField(1, "task_order", pJson["task_order"], err, false))
            return false;
    }
    if(pJson.isMember("task_name"))
    {
        if(!validJsonOfField(2, "task_name", pJson["task_name"], err, false))
            return false;
    }
    if(pJson.isMember("job_id"))
    {
        if(!validJsonOfField(3, "job_id", pJson["job_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("dependency"))
    {
        if(!validJsonOfField(4, "dependency", pJson["dependency"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(5, "status", pJson["status"], err, false))
            return false;
    }
    return true;
}
bool Tasks::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Tasks::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
